@page "/ChatWithMe"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]


<PageTitle>Chatter Box</PageTitle>


@using Microsoft.AspNetCore.Mvc.ViewFeatures;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Newtonsoft.Json;
@using Markdig;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.AspNetCore.Components;
@inject HttpClient Http
@inject IConfiguration Configuration

<h1>SQL RAG with Document Data</h1>
<h2>Your documents, in SQL</h2>

<div class="container mt-4">
    <div class="mb-3">
        Prompt Examples
        <ul>
            <li>Summarize the document content</li>
            <li>you are a helpful assistant that helps people find information</li>
            <li>you are a funny assistant the creates engaging and colorful content</li>
        </ul>
    </div>
    <div class="input-group mb-3">
    <input type="text" class="form-control" @bind="prompt" placeholder="Enter you prompt" />
    </div>

    <div class="input-group mb-3">
       
    </div>
    <div class="mb-3">
        Question Examples
        <ul>
            <li>what are the main topics of this database content?</li>
            <li>What are the main innovations of Nasa Science Mission Directorate?</li>
            <li>Give me a summary in laymans terms, only search for the document with name silkroads.pdf</li>
        </ul>
    </div>

    <div class="input-group mb-3">        
        
        <input type="text" class="form-control" @bind="userMessage" placeholder="Enter your question" />      
        
        <div class="input-group-append">
            <button class="btn btn-primary" @onclick="SendMessage">Send</button>
        </div>
    
    </div> 
  
   

    <div>
      
        <h4>Chat History</h4>

        @if (isProcessing)
        {
            <p>Processing, please wait (I am using cheap services...)</p>
            <div style="width:10%;height:10%;padding-bottom:20%;position:relative;">
                <iframe src="https://giphy.com/embed/MZiuuEnG0KOvdu2Grw" height="121" width="220" style="position:absolute" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
            </div>
        }

        @foreach (var message in chatHistory)
        {
            Console.WriteLine($"message:{message}\n");
            <div>
                @message
            </div>
        }
           
               
               
            </div>
              
    
</div>

@code {

    public class Result
    {
        public string Key { get; set; }

        public Result(string key,string value )
        {
            Key = key;
            Value = value;
        }

        public string Value { get; set; }
    }

    private string userMessage="";
    private string prompt="";
    private List<MarkupString> chatHistory = new List<MarkupString>();
    private bool isProcessing = false;
    private static readonly HttpClient client = new HttpClient();

    private async Task SendMessage()
    {
        isProcessing = true;
       
        try
        {
            List<Result> results;

            if (!string.IsNullOrEmpty(userMessage))
            {
                HttpClient client = new HttpClient();
                client.Timeout = TimeSpan.FromMinutes(6);

                var displayMessage = (MarkupString)$"Question: {userMessage}";
                chatHistory.Add(displayMessage);
                var functionUrl = Configuration["Ask_Question_URL"];
                var requestBody = new { question = userMessage, prompt = prompt };
                var response = await Http.PostAsJsonAsync(functionUrl, requestBody);
                var responseContent = await response.Content.ReadAsStringAsync(); 

                if (!string.IsNullOrEmpty(responseContent))
                {                
                    results = JsonConvert.DeserializeObject<List<Result>>(responseContent);

                    foreach (var result in results)
                    {
                        Console.WriteLine($"Key: {result.Key}\n");
                        Console.WriteLine($"Value:{result.Value}\n");                       
                        var html = result.Value;
                        var markupString = (MarkupString)html;
                        chatHistory.Add(markupString);
                    }
                }
                else
                {
                    var no_results = (MarkupString)$"You: No results found";
                    chatHistory.Add(no_results);

                }            

                // chatHistory.Add($"response: {responseContent}");
                userMessage = string.Empty;
                isProcessing = false;

            }

        }
        catch (Exception e)
        {
            var markupString = (MarkupString)e.Message;
            chatHistory.Add(markupString);
            Console.WriteLine(e.Message);
            isProcessing = false;
        }
    }    
}