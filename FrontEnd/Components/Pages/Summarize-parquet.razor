@page "/Summarize-parquet"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]


<PageTitle>Summarize Documents</PageTitle>


@using Microsoft.AspNetCore.Mvc.ViewFeatures;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Newtonsoft.Json;
@using Markdig;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.AspNetCore.Components;
@using System.Text.Json;
@inject HttpClient Http
@inject IConfiguration Configuration

<h1>Work with Long Documents</h1>
<h2>Pre-chuncked Parquet Files</h2>

<div class="container mt-4">
    <div class="input-group mb-3">
        <div> CLick on the file links to view the content
            <ul>
            <li>
                <a href="https://ustspdevpocdatalake.blob.core.windows.net/document-summarization-parquet/NEJMoa2404881-pdf.parquet?sp=r&st=2024-08-08T14:38:16Z&se=2025-10-11T22:38:16Z&sv=2022-11-02&sr=b&sig=k1XxkcN2UTw2DIiLLhrrLWBLw5UScpDRC5hqqzBQWPM%3D" target="_blank">
                    Tirzepatide for the Treatment of Obstructive Sleep Apnea and Obesity
                </a>
            </li>
            <li>
                <a href="https://ustspdevpocdatalake.blob.core.windows.net/document-summarization/0001140361-24-033072.pdf?sp=r&st=2024-08-08T14:49:52Z&se=2025-10-11T22:49:52Z&sv=2022-11-02&sr=b&sig=HCbkqnh3kp%2F45a94sY2HDbk6N%2FtySxV4fQgOkTNt5Is%3D" target="_blank">
                    Securities and Exchange Document
                </a>
            </li>
            <li>
                <a href="https://ustspdevpocdatalake.blob.core.windows.net/document-summarization/Azure%20AI%20Studio%20L300%20deck%20.PDF?sp=r&st=2024-08-08T15:07:02Z&se=2025-10-11T23:07:02Z&sv=2022-11-02&sr=b&sig=PBa6uub8k5OvGG4uEdkMVx%2BRP69Go5D7K9G8QeYHmgs%3D" target="_blank">
                    Open AI Studio L300 document
                </a>
            </li>
            </ul>
        </div>
        
        
    </div>

    <div class="input-group mb-2">
        <input type="text" class="form-control" @bind="prompt" placeholder="Enter you prompt, example: summarize document content " />
    </div>
    <div class="input-group mb-2">
        <label for="fileDropdown" style="width: 150px;align-content:flex-end" class="mb-3">Select a file:  </label>
        <select id="fileDropdown" class="form-control" @bind="file_name">
            <option value="NEJMoa2404881-pdf.parquet"> Tirzepatide for the Treatment of Obstructive Sleep Apnea and Obesity - 12 pages lots of tabls
            </option>
            <option value="0001140361-24-033072-pdf.parquet">Securities and Exchange Commission - 186 pages</option>
            <option value="AzureAIStudioL300deck-PDF.parquet">Open AI Studio L300 document - 141 pages</option>
        </select>
    </div>
    <div class="input-group mb-2">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="recursiveToggle">
            <label class="form-check-label" for="recursiveToggle">Recursive</label>
        </div>
    </div>
    <div class="input-group mb-2">        
        <label for="tokens" style="width: 150px;">Tokens per request:  </label>
        <input id="tokens" type="text" style="width: 200px;" class="form-control" @bind="tokens" placeholder="tokens per request for more detailed results, set it to 50000 " />
    </div>
    <div class="input-group mb-3">
        <input type="text" class="form-control" @bind="additional_instructions" placeholder="(optional): additional instructions, for example: use laymans terms" />
        <div class="input-group-append">
            <button class="btn btn-primary" disabled="@isProcessing" @onclick="SendMessage">Send</button>
        </div>

    </div>

        <div>

        <h4>Chat History</h4>

        @if (isProcessing)
        {
            <p>Processing, please wait (I am using cheap services...)</p>
            <div style="width:10%;height:10%;padding-bottom:20%;position:relative;">
                <iframe src="https://giphy.com/embed/MZiuuEnG0KOvdu2Grw" height="121" width="220" style="position:absolute" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
            </div>            
        }

        @foreach (var message in chatHistory)
        {
            Console.WriteLine($"message:{message}\n");
            <div>
                @message
            </div>
        }

    </div>


</div>

@code {

    public class Study
    {

        public string FileName { get; set; }
        public string Summary { get; set; }

        public Study(string fileName, string summary)
        {
            FileName = fileName;
            Summary = summary;
        }       
    }

    private string file_name = "";
    private string prompt = "";
    private string additional_instructions = "";
    private bool recursive = false;
    private bool isProcessing = false;
    private int tokens = 100000;

    private List<MarkupString> chatHistory = new List<MarkupString>();
    private static readonly HttpClient client = new HttpClient();

    private async Task SendMessage()
    {
        isProcessing = true;
        HttpClient client = new HttpClient();
        try
        {
            List<Study> results;

            client.Timeout = TimeSpan.FromMinutes(6);

            if (string.IsNullOrEmpty(file_name))
            {
                file_name = "NEJMoa2404881-pdf.parquet";
            }

            if (!string.IsNullOrEmpty(file_name))
            {
                var displayMessage = (MarkupString)$"File Name: {file_name}";
                chatHistory.Add(displayMessage);
                var functionUrl = Configuration["Parquet_URL"];
                int recursivesearch = recursive ? 1 : 0;             


                ////////////////////////////////////////////
                ///var client = new HttpClient();
                var request = new HttpRequestMessage(HttpMethod.Get, Configuration["Parquet_URL"]);
                var content = new StringContent($"{{ \"file_name\" : \"{file_name}\", \"file_url\": \"\", \"system_message\" : \"{prompt}\", \"additional_instructions\" : \"{additional_instructions}\", \"recursive\" : {recursivesearch}, \"tokens_per_chunk\" : {tokens} }}", null, "application/json");
                request.Content = content;
                var response = await client.SendAsync(request);
                response.EnsureSuccessStatusCode();
                Console.WriteLine(await response.Content.ReadAsStringAsync());
                var responseContent = await response.Content.ReadAsStringAsync();
                //////////////////////////////////////////

                if (!string.IsNullOrEmpty(responseContent))
                {
                    try {
                    using (JsonDocument doc = JsonDocument.Parse(responseContent))
                    {
                        JsonElement root = doc.RootElement;
                        string fileName = root.GetProperty("file_name").GetString();
                        string summary = root.GetProperty("summary").GetString();

                        Console.WriteLine($"File Name: {fileName}");
                        Console.WriteLine($"Summary: {summary}");                       
                        var markupString = (MarkupString)summary;
                        chatHistory.Add(markupString);
                    }    
                    }
                    catch (Exception e)
                    {
                        var nogoodresults = (MarkupString)$"API Response: {responseContent}";
                        chatHistory.Add(nogoodresults);
                        var errormessage = (MarkupString)$"Error when parsing: {e.Message}";
                        chatHistory.Add(errormessage);
                        Console.WriteLine(e.Message);
                    }
                }
                else
                {
                    var no_results = (MarkupString)$"You: No results found";
                    chatHistory.Add(no_results);

                }

                isProcessing = false;

                // chatHistory.Add($"response: {responseContent}");
                // userMessage = string.Empty;

            }

        }
        catch (Exception e)
        {
            isProcessing = false;
            var errormessage = (MarkupString)$"Error: {e.Message}";
            chatHistory.Add(errormessage);
            Console.WriteLine(e.Message);
        }
    }
}